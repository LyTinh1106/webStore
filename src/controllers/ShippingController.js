const Shipping = require("../models/ShippingModel");

const getAllShipping = (req, res) => {
  Shipping.getAll((err, data) => {
    if (err) {
      res.status(500).render("error", { message: err.message || "ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch v·∫≠n chuy·ªÉn." });
    } else {
      res.render("shippingDashboard", { shippings: data });
    }
  });
};

const getShippingById = (req, res) => {
  const id = req.params.id;
  Shipping.findById(id, (err, data) => {
    if (err) {
      if (err.kind === "not_found") {
        res.status(404).render("error", { message: `Kh√¥ng t√¨m th·∫•y th√¥ng tin v·∫≠n chuy·ªÉn v·ªõi ID ${id}.` });
      } else {
        res.status(500).render("error", { message: `L·ªói truy xu·∫•t th√¥ng tin v·∫≠n chuy·ªÉn v·ªõi ID ${id}.` });
      }
    } else {
      res.render("shippingDashboard", { shipping: data, mode: "edit" });
    }
  });
};

const createShipping = (req, res) => {
  const {
    shipping_date,
    delivery_method,
    shipping_status = "Th√†nh c√¥ng",
    id_customer,
    id_order,
    shipping_address
  } = req.body;

  // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
  if (!delivery_method || !id_customer || !id_order || !shipping_address) {
    return res.status(400).json({
      success: false,
      message: "Thi·∫øu th√¥ng tin v·∫≠n chuy·ªÉn b·∫Øt bu·ªôc."
    });
  }

  const newShipping = new Shipping({
    shipping_date: shipping_date || new Date(),
    delivery_method,
    shipping_status,
    id_customer,
    id_order,
    shipping_address,
  });

  // Th√™m v√†o b·∫£ng shipping
  Shipping.create(newShipping, (err, shippingData) => {
    if (err) {
      console.error(" L·ªói khi t·∫°o ƒë∆°n giao h√†ng:", err);
      return res.status(500).json({
        success: false,
        message: "L·ªói khi t·∫°o ƒë∆°n giao h√†ng.",
        error: err
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    Shipping.updateOrderStatusToCompleted(id_order, (updateErr, updateResult) => {
      if (updateErr) {
        console.warn(" T·∫°o th√†nh c√¥ng shipping nh∆∞ng kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c ƒë∆°n h√†ng:", updateErr);
        return res.status(500).json({
          success: false,
          message: "T·∫°o ƒë∆°n giao h√†ng th√†nh c√¥ng, nh∆∞ng c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th·∫•t b·∫°i.",
          shipping: shippingData
        });
      }

      // ‚úÖ Th√†nh c√¥ng ho√†n to√†n
      return res.status(201).json({
        success: true,
        message: "T·∫°o ƒë∆°n giao h√†ng v√† c·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng.",
        shipping: shippingData,
        orderUpdate: updateResult
      });
    });
  });
};





const updateShippingById = (req, res) => {
  const id = req.params.id;
  const { shipping_date, delivery_method, shipping_status, id_customer, id_order, shipping_address } = req.body;

  if (!shipping_date || !delivery_method || !shipping_status || !id_customer || !id_order || !shipping_address) {
    return res.status(400).render("error", { message: "Thi·∫øu th√¥ng tin ƒë·ªÉ c·∫≠p nh·∫≠t v·∫≠n chuy·ªÉn." });
  }

  const updatedShipping = new Shipping({ shipping_date, delivery_method, shipping_status, id_customer, id_order, shipping_address });

  Shipping.updateById(id, updatedShipping, (err, data) => {
    if (err) {
      if (err.kind === "not_found") {
        res.status(404).render("error", { message: `Kh√¥ng t√¨m th·∫•y v·∫≠n chuy·ªÉn v·ªõi ID ${id}.` });
      } else {
        res.status(500).render("error", { message: "L·ªói khi c·∫≠p nh·∫≠t v·∫≠n chuy·ªÉn." });
      }
    } else {
      res.redirect("/shippings");
    }
  });
};

const deleteShippingById = (req, res) => {
  const id = req.params.id;

  Shipping.remove(id, (err, data) => {
    if (err) {
      if (err.kind === "not_found") {
        res.status(404).render("error", { message: `Kh√¥ng t√¨m th·∫•y v·∫≠n chuy·ªÉn v·ªõi ID ${id}.` });
      } else {
        res.status(500).render("error", { message: "L·ªói khi xo√° v·∫≠n chuy·ªÉn." });
      }
    } else {
      res.redirect("/shippings");
    }
  });
};



// üëâ Export to√†n b·ªô
module.exports = {
  createShipping,
  getShippingById,
  getAllShipping,
  updateShippingById,
  deleteShippingById,
};
